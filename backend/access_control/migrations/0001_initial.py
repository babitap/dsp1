# Generated by Django 2.1.11 on 2020-03-03 00:11

import access_control.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, verbose_name='username')),
                ('oid', models.CharField(blank=True, max_length=255, null=True)),
                ('is_findex', models.BooleanField(default=False)),
                ('is_findex_all', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_disabled', models.DateTimeField(default=None, null=True, verbose_name='date disabled')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', access_control.models.MyUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_name', models.CharField(max_length=255, null=True)),
                ('industry_id', models.IntegerField()),
                ('industry_name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_activated', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_disabled', models.DateTimeField(default=None, null=True, verbose_name='date disabled')),
            ],
        ),
        migrations.CreateModel(
            name='EntityGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, verbose_name='name')),
                ('description', models.CharField(max_length=255, verbose_name='description')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access_control.Entity')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
            managers=[
                ('objects', access_control.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('codename', models.CharField(max_length=100, unique=True, verbose_name='codename')),
                ('is_findex', models.BooleanField(default=False)),
                ('is_findex_all', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'permission',
                'verbose_name_plural': 'permissions',
            },
            managers=[
                ('objects', access_control.models.PermissionManager()),
            ],
        ),
        migrations.AddField(
            model_name='entitygroup',
            name='permissions',
            field=models.ManyToManyField(blank=True, to='access_control.Permission', verbose_name='permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='entity',
            unique_together={('industry_id', 'industry_name')},
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='access_control.EntityGroup', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='access_control.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='entitygroup',
            unique_together={('name', 'entity')},
        ),
    ]
